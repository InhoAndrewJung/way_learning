<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">

	<resultMap type="member" id="memberRM">
		<result property="userId" column="user_id" />
		<result property="email" column="email" />
		<result property="password" column="password" />
		<result property="activity" column="activity" />
		<result property="imgProfile" column="img_profile" />
		<result property="regDate" column="reg_date" />

	</resultMap>


	<sql id="selectMember">
		select user_id,password,email, activity, img_profile,
		reg_date from
		wl_member
	</sql>



	<select id="login" parameterType="member" resultMap="memberRM">
		select
		user_id,email, activity, img_profile, reg_date from wl_member
		where
		user_id=#{id} and password=#{password}
	</select>

	<update id="updateMember" parameterType="member">
		update
		wl_member set
		password=#{password},email=#{email},img_profile=#{imgProfile}
		where
		user_id=#{userId}
	</update>

	<insert id="registerMember" parameterType="member">
		insert into
		wl_member(user_id,password,email,img_profile)
		values(#{userId},#{password},#{email},#{imgProfile})
	</insert>
	<select id="idcheck" resultType="int">
		select count(*) from wl_member
		where user_id=#{value}
	</select>
	<select id="emailcheck" resultType="int">
		SELECT count(*)
		FROM wl_member
		WHERE email=#{value}
	</select>
	<select id="findMemberById" resultMap="memberRM">

		SELECT
		user_id,password,email,activity,img_profile,reg_date
		FROM wl_member
		WHERE user_id=#{value}
	</select>

	<select id="findIdByEmail" parameterType="string" resultType="string">
		SELECT user_id
		FROM wl_member
		WHERE email=#{value}
	</select>

	<update id="updatefindPass">
		UPDATE wl_member
		SET password=#{password}
		WHERE
		user_id=#{userId}
	</update>

	<!--회원탈퇴 추가 -->
	<delete id="deleteMember" >
		DELETE from wl_member
		WHERE user_id=#{userId}

	</delete>



	<!-- 마이 페이지 관련 -->
	<resultMap type="answerResult" id="answerResultRM">
		<result property="member.userId" column="user_id" />
		<result property="member.activity" column="activity" />
		<result property="member.imgProfile" column="img_profile" />
		<result property="questionNo" column="question_no" />
		<result property="myCntSubmit" column="my_cnt_submit" />
		<result property="myCntWrong" column="my_cnt_wrong" />
		<result property="myCntRight" column="my_cnt_right" />
		<result property="myCntError" column="my_cnt_error" />
		<result property="myRightPercent" column="my_right_Percent" />
	</resultMap>

	<select id="selectRightNo" resultType="string">
		select QUESTION_NO from wl_answer_result where user_id=#{userId} and
		MY_CNT_RIGHT != 0
	</select>

	<select id="selectWrongNo" resultType="string">
		select QUESTION_NO from wl_answer_result where user_id=#{userId} and
		MY_CNT_RIGHT = 0 and MY_CNT_WRONG is not null
	</select>

	<select id="selectMyRecord" resultMap="answerResultRM">
		select user_id ,sum(MY_CNT_SUBMIT) MY_CNT_SUBMIT,sum(MY_CNT_RIGHT)
		MY_CNT_RIGHT,sum(MY_CNT_WRONG) MY_CNT_WRONG, sum(MY_CNT_ERROR)
		MY_CNT_ERROR from wl_answer_result where user_id=#{userId} group by
		user_id
	</select>

	<select id="selectMyRanking" resultType="int">
		select a.ranking from(select user_id ,sum(MY_CNT_SUBMIT)
		my_cnt_submit,sum(MY_CNT_RIGHT)my_cnt_right,sum(MY_CNT_WRONG)
		my_cnt_wrong,rank() over(order by sum(MY_CNT_SUBMIT) desc)as ranking
		from wl_answer_result group by user_id)a
		where user_id=#{userId}
	</select>

	<!-- <select id="selectAllRanking" parameterType="string" resultMap="answerResultRM">
		select user_id ,sum(MY_CNT_SUBMIT) MY_CNT_SUBMIT, sum(MY_CNT_RIGHT)
		MY_CNT_RIGHT,sum(MY_CNT_WRONG) MY_CNT_WRONG, round((
		sum(MY_CNT_RIGHT)/sum(MY_CNT_SUBMIT)*100),2) my_right_Percent ,

		<if test="sorting == 'cntSubmit'">
			rank() over(order by sum(MY_CNT_SUBMIT) desc)
		</if>

		<if test="sorting == 'cntRight'">
			rank() over(order by sum(MY_CNT_RIGHT) desc)
		</if>

		<if test="sorting == 'RightPercent'">
			rank() over(order by round(( sum(MY_CNT_RIGHT)/sum(MY_CNT_SUBMIT)*100),2)
			desc)
<<<<<<< HEAD
		</if>
       as ranking from wl_answer_result group by user_id
	</select> -->
	
	
	<select id="selectAllRanking" parameterType="string" resultMap="answerResultRM">
		select m.user_id ,m.activity,m.img_profile, sum(MY_CNT_SUBMIT) MY_CNT_SUBMIT, sum(MY_CNT_RIGHT)
		MY_CNT_RIGHT,sum(MY_CNT_WRONG) MY_CNT_WRONG, round((
		sum(MY_CNT_RIGHT)/sum(MY_CNT_SUBMIT)*100),2) my_right_Percent ,

		<if test="sorting == 'cntSubmit'">
			rank() over(order by sum(MY_CNT_SUBMIT) desc)
		</if>

		<if test="sorting == 'cntRight'">
			rank() over(order by sum(MY_CNT_RIGHT) desc)
=======
>>>>>>> master
		</if>
       as ranking from wl_answer_result group by user_id
	</select> -->
	
	
	<select id="selectAllRanking" parameterType="string" resultMap="answerResultRM">
		select m.user_id ,m.activity,m.img_profile, sum(MY_CNT_SUBMIT) MY_CNT_SUBMIT, sum(MY_CNT_RIGHT)
		MY_CNT_RIGHT,sum(MY_CNT_WRONG) MY_CNT_WRONG, round((
		sum(MY_CNT_RIGHT)/sum(MY_CNT_SUBMIT)*100),2) my_right_Percent ,

<<<<<<< HEAD
=======
		<if test="sorting == 'cntSubmit'">
			rank() over(order by sum(MY_CNT_SUBMIT) desc)
		</if>

		<if test="sorting == 'cntRight'">
			rank() over(order by sum(MY_CNT_RIGHT) desc)
		</if>

>>>>>>> master
		<if test="sorting == 'RightPercent'">
			rank() over(order by round(( sum(MY_CNT_RIGHT)/sum(MY_CNT_SUBMIT)*100),2)
			desc)
		</if>
       as ranking from wl_answer_result ar ,wl_member m where ar.user_id=m.user_id group by m.user_id ,m.activity,m.img_profile
	</select>
	
	
	<!-- select m.user_id ,m.activity,m.img_profile, sum(MY_CNT_SUBMIT) MY_CNT_SUBMIT, sum(MY_CNT_RIGHT)
		MY_CNT_RIGHT,sum(MY_CNT_WRONG) MY_CNT_WRONG, round((
		sum(MY_CNT_RIGHT)/sum(MY_CNT_SUBMIT)*100),2) my_right_Percent ,
			rank() over(order by sum(MY_CNT_SUBMIT) desc)
       as ranking from wl_answer_result ar ,wl_member m where ar.user_id=m.user_id group by m.user_id ,m.activity,m.img_profile; -->



	<select id="selectBoardFavorite" resultType="hashmap">


	select * from
(select  tbr.board_no, tbr.reg_date, tb.writer, title,m.img_profile,m.activity , 'tech' as table_name
from wl_tech_board_recommend tbr, wl_tech_board tb,wl_member m where tbr.board_no=tb.board_no and
tbr.user_id=m.user_id and m.user_id=#{userId}
UNION ALL
select  qbr.board_no, qbr.reg_date, qb.writer, title, m.img_profile, m.activity,'qna' as table_name
from wl_qna_board_recommend qbr, wl_qna_board qb,wl_member m where qbr.board_no=qb.board_no and
qbr.user_id=m.user_id and m.user_id=#{userId} )a where a.reg_date   &gt; (sysdate -10) order by a.reg_date desc

	</select>

	<select id="selectReplyFavorite" resultType="hashmap">

	select * from (select tr.board_no,trr.reply_no, tr.replyer ,
(select writer from wl_tech_board where board_no=tr.board_no)writer,
(select title from wl_tech_board where board_no=tr.board_no)title,
trr.reg_date,m.img_profile,m.activity,'tech' as table_name
from wl_tech_reply_recommend trr, wl_tech_reply tr,wl_member m where trr.reply_no=tr.reply_no and
trr.user_id=m.user_id and m.user_id=#{userId}
UNION ALL
select qr.board_no,qrr.reply_no, qr.replyer ,
(select writer from wl_qna_board where board_no=qr.board_no)writer,
(select title from wl_qna_board where board_no=qr.board_no)title,
qrr.reg_date,m.img_profile,m.activity,'qna' as table_name
from wl_qna_reply_recommend qrr, wl_qna_reply qr,wl_member m where qrr.reply_no=qr.reply_no and
qrr.user_id=m.user_id and m.user_id=#{userId})a where a.reg_date  &gt; (sysdate -10) order by a.reg_date desc
	</select>

	<select id="selectMyLectureRecord" resultType="hashmap">

select a.* ,
(select count(-1) from wl_my_lecture_record where course_no=a.course_no) cnt_My_record,
(select count(-1) from wl_lecture_board where course_no=a.course_no) cnt_Course,
greatest(round((select count(-1) from wl_my_lecture_record where course_no=a.course_no)/(select count(-1) from wl_lecture_board where course_no=a.course_no)*100,2),0) progress
from (select lr.course_no,lc.course_name,lecture_order,lr.lecture_no,lecture_name,lb.author,lc.course_image 
from wl_lecture_board lb, wl_my_lecture_record lr ,wl_course lc
where lb.course_no=lr.course_no and lr.course_no=lc.course_no and lb.lecture_no=lr.LECTURE_NO  and user_id=#{userId} order by course_no, lecture_order) a
	
<!-- =======
		select a.* ,
		(select count(-1) from wl_my_lecture_record where course_no=a.course_no) cnt_My_record,
		(select count(-1) from wl_lecture_board where course_no=a.course_no) cnt_Course,
		greatest(round((select count(-1) from wl_my_lecture_record where course_no=a.course_no)/(select count(-1) from wl_lecture_board where course_no=a.course_no)*100,2),0) progress
		from (select lr.course_no,lc.course_name,lecture_order,lr.lecture_no,lecture_name,lb.author,lc.course_image
		from wl_lecture_board lb, wl_my_lecture_record lr ,wl_course lc
		where lb.course_no=lr.course_no and lr.course_no=lc.course_no and lb.lecture_no=lr.LECTURE_NO  and user_id=#{userId} order by course_no, lecture_order) a

>>>>>>> 1ded3f3008abb35dce971eb41c4c71a86123f8b9 -->
	</select>

	<select id="selectLectureFavorite" resultType="hashmap">
select cr.course_no,course_name,description,cr.reg_date,cr.user_id,author,m.img_profile,m.activity from wl_course_recommend cr, wl_course c,wl_member m where cr.course_no=c.course_no
and c.author=m.user_id and cr.user_id=#{userId}

	</select>


</mapper>
